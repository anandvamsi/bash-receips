Solution1:-

#!/bin/bash


##Phone numbers
grep -o '([0-9]\{5\})\ [0-9]\{6\}' webpage.html >> tmp
grep -o '[0-9]\{5\}\ [0-9]\{6\}' webpage.html >> tmp
grep -o '([0-9]\{5\})[0-9]\{5\}' webpage.html >> tmp
sort tmp > numbers.txt
rm tmp

#Email ids
grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{3,6}\b"  webpage.html > tmp
sort -u tmp > emails.txt


##Grep help
#-E, â€“extended-regexp
#-o  Only patching

----------------------------
root@PF1Q1ZDY:/tmp# cat average.sh
#!/bin/bash
>tmp
cat user-list.txt | sed '1d' | while read line
do

        user=`echo $line | cut -d "," -f2`
        count=`echo $line | cut -d "," -f3- | tr -s "," "\n" | awk '{sum+=$1;} END {print sum}'`
        average=`echo print $count / 5 | perl`
        echo "$user $average" >> tmp

done

cat tmp | sort -nk2 > averages.txt
rm tmp
-----------------------------
root@PF1Q1ZDY:/tmp# cat wednesday.sh
#!/bin/bash
>tmp
cat user-list.txt | sed '1d' | while read line
do
        wed_count=`echo $line | cut -d "," -f5`
        echo $wed_count >> tmp
done
total=`cat tmp | awk '{sum+=$1} END {print sum}'`
average_wednesday=`echo print $total / 10 | perl`
echo  $average_wednesday > wednesday.txt
rm tmp
----------------------------------
root@PF1Q1ZDY:/tmp# cat superuser.sh
#!/bin/bash
>tmp
cat user-list.txt | sed '1d' | while read line
do
        user=`echo $line | cut -d "," -f2`
        digit=`echo $user | rev | cut -c1`
        mod=$(($digit % 2))
        if [ $mod -eq 0 ]
        then
            count=`echo $line | cut -d "," -f3- | tr -s "," "\n" | awk '{sum+=$1;} END {print sum}'`
            average=`echo print $count / 5 | perl`
            echo $average >> tmp
         fi

done
total_hrs=`cat tmp  | awk '{sum+=$1} END {print sum}'`
average=`echo print $total_hrs / 5 | perl`
echo $average > superuser.txt
rm tmp
-----------------------------
root@PF1Q1ZDY:/tmp# cat login.sh
#!/bin/bash
>tmp
cat user-list.txt | sed '1d' | while read line
do

        user=`echo $line | cut -d "," -f2`
        mon_hr=`echo $line | cut -d "," -f3`
        [ $mon_hr -gt 0 ]&& echo "$user" >> tmp

done
cat tmp | sort -nk1.5 > login.txt
rm tmp
--------------------------------








>>>

1.1 and 1.2
Grep is in build with regular expression  where we can parse the required pattern from an inputfiles.
In this case of phone numbers we specify the count of the digits in accordance phone number pattern.
Even special symbols also be incorperated to parse the required pattern from the inputfile

-E flag is the functionlity for extented Grep
-o
Sort command is used to sort the numbers and strings.
-u flag is used to remove the duplicates from input file.



1.2
\b in a regular expression means "word boundary".
match the boundary on both start and end of a word.


2.1
Averarge.sh
Script will read the file ommiting the header and takes hours which from paramter
3 onwards and add the sum ,Dividing the digits by number of days will 
provide the average hours.
sort command is used to sort the marks in Ascending order.

2.2
Script will read the file ommiting the header.
Variable corresponding to wednesday is captured and saved to text file for all the 10 rows
awk command is used to find the sum and dividing it by 10 will provide the 
average hours with respect to wednesday

2.3
Script will read the file ommiting the header.
SuperUser are computer by taking the modulous operator of last of characer wrt name
this is attained by using the command rev and cut.
if the result of mod expression is 0 then 3rd field is parsed and finally 
computes the sum and average

2.4
Script will read the file ommiting the header.
second and third field will be parsed and saved,if the third field is greater
than 0 ,results will posted to output file.
finally sort command is used to sort the names and results is saved to login.txt



------------------------------------------------
 cat task2.2.sh
#!/bin/bash
ip=`grep SERVER dig_google.txt | cut -d ":" -f2 | cut -d "("  -f1 | sed 's/ //g' | cut -d "#" -f1`
echo "$ip"


cat task2.3.sh
#!/bin/bash

for line in $(cat urls.txt)
do
        echo "Do you wish to save the url $line"
        read choice
        echo $choice | grep -i y
        [ $? -eq 0 ]&& echo $line >> saved_domains.txt


cat task2.4.sh
#!/bin/bash
grep ^127 ips.txt >> loopback_ips.txt
grep ^162. ips.txt  | sort -t "." -nk2 >> suspect_ips.txt
grep ^175. ips.txt  | sort -t "." -nk2 >> suspect_ips.txt
















